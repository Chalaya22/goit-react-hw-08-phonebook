{"version":3,"file":"static/js/646.41f1f14c.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/LoaderPhone/LoaderPhone.module.css?caaa","components/LoaderPhone/LoaderPhone.jsx","redux/selectors.js","../node_modules/nanoid/index.browser.js","webpack://react-homework-template/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.jsx","webpack://react-homework-template/./src/components/ContactList/ContactList.module.css?1ce0","webpack://react-homework-template/./src/components/ContactElements/ContactElements.module.css?8c47","components/ContactElements/ContactElements.jsx","components/ContactList/ContactList.jsx","webpack://react-homework-template/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","pages/Contacts.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"css\":\"LoaderPhone_css__Tpxmx\",\"styleLoader\":\"LoaderPhone_styleLoader__8hJ6M\"};","import { Dna } from 'react-loader-spinner';\nimport css from './LoaderPhone.module.css';\nconst Loader = () => {\n  return (\n    <div className={css.styleLoader}>\n      <Dna\n        visible={true}\n        height=\"80\"\n        width=\"80\"\n        ariaLabel=\"dna-loading\"\n        wrapperStyle={{}}\n        wrapperClass=\"dna-wrapper\"\n      />\n    </div>\n  );\n};\n\nexport default Loader;\n","export const selectorContacts = state => state.contacts.contacts;\nexport const selectorIsLoading = state => state.contacts.isLoading;\nexport const selectorError = state => state.contacts.error;\nexport const selectorFilter = state => state.contacts.filter;\n","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactForm_form__dhl+T\",\"labelText\":\"ContactForm_labelText__JB4h1\",\"imputForm\":\"ContactForm_imputForm__qzGyq\",\"buttonForm\":\"ContactForm_buttonForm__RQPsC\"};","import React, { useState } from 'react';\nimport { nanoid } from 'nanoid';\nimport { useDispatch } from 'react-redux';\nimport { addContact } from 'redux/contactOperation';\nimport Notiflix from 'notiflix';\nimport css from './ContactForm.module.css';\n\nconst ContactForm = () => {\n  const dispatch = useDispatch();\n\n  const [name, setName] = useState(' ');\n  const [number, setNumber] = useState(' ');\n\n  const handleInputChange = event => {\n    const { name, value } = event.currentTarget;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        return;\n    }\n  };\n  const reset = () => {\n    setName(' ');\n    setNumber(' ');\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (name.trim() === '' || number.trim() === '') {\n      Notiflix.Notify.warning(' Please fill in all fields!');\n    }\n    const newObject = {\n      id: nanoid(),\n      name,\n      number,\n    };\n\n    dispatch(addContact(newObject));\n    reset();\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className={css.form}>\n      <label>\n        <p className={css.labelText}>Name</p>\n        <input\n          className={css.imputForm}\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          onChange={handleInputChange}\n          placeholder=\"username: \"\n          required\n        />\n      </label>\n      <label>\n        <p className={css.labelText}>Number</p>\n        <input\n          className={css.imputForm}\n          type=\"tel\"\n          name=\"number\"\n          value={number}\n          onChange={handleInputChange}\n          placeholder=\"Enter number tel:\"\n          required\n        />\n      </label>\n\n      <button className={css.buttonForm} type=\"submit\">\n        Add contact\n      </button>\n    </form>\n  );\n};\nexport default ContactForm;\n","// extracted by mini-css-extract-plugin\nexport default {\"contactList\":\"ContactList_contactList__UFVCg\"};","// extracted by mini-css-extract-plugin\nexport default {\"contactElements\":\"ContactElements_contactElements__XX5lQ\",\"itemName\":\"ContactElements_itemName__95nsE\",\"itemNumber\":\"ContactElements_itemNumber__+In2l\",\"buttonForm\":\"ContactElements_buttonForm__mRKFG\"};","import css from './ContactElements.module.css';\nconst ContactElements = ({ id, name, number, onDelete }) => {\n  return (\n    <li key={id} className={css.contactElements}>\n      <span className={css.itemName}> {name}:</span>\n      <span className={css.itemNumber}> {number}</span>\n      <button\n        className={css.buttonForm}\n        type=\"button\"\n        onClick={() => onDelete(id)}\n      >\n        Delay\n      </button>\n    </li>\n  );\n};\nexport default ContactElements;\n","import css from './ContactList.module.css';\nimport ContactElements from '../ContactElements/ContactElements';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { removeContact } from 'redux/contactOperation';\n\nconst ContactList = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(state => state.contacts.contacts);\n  const filter = useSelector(state => state.filter.filter);\n\n  const onFilterContacts = () => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.trim().toLowerCase())\n    );\n  };\n\n  const filteredContacts = onFilterContacts();\n\n  function onDelete(id) {\n    dispatch(removeContact(id));\n  }\n\n  return (\n    <ul className={css.contactList}>\n      {filteredContacts.map(({ id, name, number }) => (\n        <ContactElements\n          key={id}\n          name={name}\n          id={id}\n          number={number}\n          onDelete={onDelete}\n        />\n      ))}\n    </ul>\n  );\n};\nexport default ContactList;\n","// extracted by mini-css-extract-plugin\nexport default {\"filter\":\"Filter_filter__vxThR\",\"filterTitle\":\"Filter_filterTitle__5SDqd\",\"filterImput\":\"Filter_filterImput__amMjC\"};","import { createFilter } from 'redux/filterSlice';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectorFilter } from 'redux/selectors';\nimport css from './Filter.module.css';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectorFilter);\n\n  const onFilter = event => {\n    dispatch(createFilter(event.target.value));\n  };\n\n  return (\n    <div className={css.filter}>\n      <label htmlFor=\"filter\">\n        <p className={css.filterTitle}>FIND CONTACT BY NAME</p>\n        <input\n          className={css.filterImput}\n          type=\"text\"\n          name=\"filter\"\n          id=\"filter\"\n          value={filter}\n          onChange={onFilter}\n          placeholder=\" Username: \"\n          required\n        />\n      </label>\n    </div>\n  );\n};\nexport default Filter;\n","import { useSelector, useDispatch } from 'react-redux';\nimport { useEffect } from 'react';\nimport { fetchContacts } from 'redux/contactOperation';\nimport { selectorContacts, selectorIsLoading } from 'redux/selectors';\nimport ContactForm from 'components/ContactForm/ContactForm';\nimport ContactList from 'components/ContactList/ContactList';\nimport Loader from 'components/LoaderPhone/LoaderPhone';\nimport Filter from 'components/Filter/Filter';\n\nexport const Contacts = () => {\n  const contacts = useSelector(selectorContacts);\n  const isLoading = useSelector(selectorIsLoading);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <section className=\"styledSection\">\n      {isLoading && <Loader />}\n      <h1 className=\"titlePhone\">PHONEBOOKS </h1>\n      <ContactForm />\n\n      <h2 className=\"titleContact\">CONTACTS</h2>\n      {contacts.length > 1 && <Filter />}\n\n      {<ContactList />}\n    </section>\n  );\n};\nexport default Contacts;\n"],"names":["_jsx","className","css","children","Dna","visible","height","width","ariaLabel","wrapperStyle","wrapperClass","selectorContacts","state","contacts","selectorIsLoading","isLoading","selectorFilter","filter","nanoid","size","arguments","length","undefined","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase","dispatch","useDispatch","_useState","useState","_useState2","_slicedToArray","name","setName","_useState3","_useState4","number","setNumber","handleInputChange","event","_event$currentTarget","currentTarget","value","_jsxs","onSubmit","e","preventDefault","trim","Notiflix","newObject","addContact","type","onChange","placeholder","required","_ref","onDelete","onClick","useSelector","filteredContacts","contact","toLowerCase","includes","removeContact","map","ContactElements","htmlFor","createFilter","target","Contacts","useEffect","fetchContacts","Loader","ContactForm","Filter","ContactList"],"sourceRoot":""}